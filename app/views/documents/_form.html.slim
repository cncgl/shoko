= form_for document, html: { class: 'uk-form uk-form-stacked' }, remote: true do |f|
  = f.check_box :draft_flag, { class: 'uk-hidden' }
  .uk-form-row
    .uk-grid
      .uk-width-medium-1-3
        = select_tag :template, options_from_collection_for_select(templates, :id, :title), { prompt: 'テンプレート', class: 'uk-form-large uk-width-1-1' }
      .uk-margin-top.uk-visible-small
      .uk-width-medium-2-3
        = f.text_field :title, autofocus: true, class: 'uk-form-large uk-width-1-1', placeholder: 'タイトル'
  .uk-form-row
    = f.text_area :markdown, 'data-uk-htmleditor' => '{ markdown: true }'
  .uk-form-row
    .uk-grid
      .uk-width-medium-2-3
        .uk-placeholder.uk-text-center#upload-drop
          i.uk-icon-cloud-upload.uk-icon-medium.uk-text-muted.uk-margin-small-right
          | 画像をドラッグもしくは
          a.uk-form-file
            | 選択
            input#upload-select type="file" multiple="multiple"
          | してアップロード
      .uk-margin-top.uk-visible-small
      .uk-width-medium-1-3.uk-text-center
        .uk-button-group
          button.uk-button.uk-button-big.uk-button-primary#document-publish
            = fa_icon 'globe', text: '公開'
          button.uk-button.uk-button-big#document-draft
            = fa_icon 'pencil', text: '下書き'

- if document.id && document.is_publish?
  coffee:
    $('#document-draft').attr('disabled', true)

javascript:
  websocket_url = '#{request.raw_host_with_port}/websocket'
  user_account = '#{current_user.account}'

coffee:
  marked.setOptions {
    breaks: true
    gfm: true
    highlight: (code, lang) ->
      hljs.highlightAuto(code, [lang]).value
  }
  dispatcher = new WebSocketRails(websocket_url)
  channel = dispatcher.subscribe(user_account)
  channel.bind 'create_picture', ( data ) ->
    content = '\n[![' + data.file_name + '](' + data.image + ' \"' + data.file_name + '\")](' + data.url + ')\n'
    $('.CodeMirror')[0].CodeMirror.replaceSelection(content)
  ukUploadSettings = {
    action: '/pictures'
    allow: '*.(jpeg|jpg|png|gif|pdf)'
    notallowed: ->
      UIkit.notify({ message: '不正な画像ファイルです。', timeout: 3000, status: 'danger' })
    error: ->
      UIkit.notify({ message: 'アップロード中にエラーが発生しました。', timeout: 3000, status: 'danger' })
    abort: ->
      UIkit.notify({ message: 'アップロードを中断しました。', timeout: 3000, status: 'danger' })
    params: {
      authenticity_token: $('meta[name=\"csrf-token\"]').attr('content')
    }
  }
  uk_select = UIkit.uploadSelect($('#upload-select'), ukUploadSettings)
  uk_drop = UIkit.uploadDrop($('#upload-drop'), ukUploadSettings)
  $('#template').on 'change', ->
    if $(this).val() == ''
      $(this).addClass('placeholder')
    else
      $(this).removeClass('placeholder')
    if $(':selected').attr('value') != ''
      $.ajax {
        'url': '/templates/' + $(':selected').attr('value') + '/select'
        'type': 'GET'
        'data-type': 'html'
      }
  $('#template').change()
  $('#document-publish').on 'click', (event) ->
    event.preventDefault()
    $('#document_draft_flag').prop('checked', false)
    $('.uk-form').submit()
  $('#document-draft').on 'click', (event) ->
    event.preventDefault()
    $('#document_draft_flag').prop('checked', true)
    $('.uk-form').submit()
  $(document).ready ->
    $('.uk-htmleditor-preview').addClass('markdown-body')
